bundle Trie where
    import Wrappers
    import HashMap

    passive class TrieNode {
        child_map : HashMap<TrieNode>
        word_end : bool -- true if this node marks the end of a word

        def init(arr : [char], index : uint) : void {
            this.child_map = new HashMap<TrieNode>();
            this.word_end = false;
            this.add(arr, index);
        }

        {-
            Recursive add.
        -}
        def add(arr : [char], index : uint) : void {
            if index >= |arr| then {
                this.word_end = true;
            } else {
                let
                    character = new Char(arr[index])
                    child = this.child_map.get_value(character)
                in {
                    match child with
                        Just node => node.add(arr, index + 1)
                        Nothing => this.child_map.set(character, new TrieNode(arr, index + 1))
                }
            };
        }

        def contains(arr : [char], index : uint) : bool {
            --TODO: Implement
            false
        }

        def is_prefix(arr : [char], index : uint) : bool {
            --TODO: Implement
            false
        }

        def get_suffixes(arr : [char], index : uint) : Maybe [String] {
            --TODO: Implement
            Nothing
        }
    }

    passive class Trie {
        root : Maybe TrieNode

        def init() : void {
            this.root = Nothing;
        }

        def add(str : String) : void {
            let arr = str.to_array() in {
                match this.root with
                    Just root => root.add(arr, 0)
                    Nothing => this.root = Just new TrieNode(arr, 0)
            }
        }

        def contains(str : String) : bool {
            --TODO: Implement
            false
        }

        def is_prefix(str : String) : bool {
            --TODO: Implement
            false
        }

        def get_suffixes(str : String) : Maybe [String] {
            --TODO: Implement
            Nothing
        }
    }
