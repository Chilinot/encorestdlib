module HashMap

import LinkedList
import Siphash
import Hasher
import HashCode
import Collection
import Map

passive class Entry[v]
  var key : HashCode
  var value : v
  def init(key : HashCode, value : v) : unit
    this.key = key
    this.value = value
  end
end

passive class HashMapIterator[v]
  var map : HashMap[v]
  var current_index : uint
  var current_node : Maybe[LinkedNode[Entry[v]]]

  def init(map : HashMap[v]) : unit
    this.map = map.clone()
    this.current_index = -(1)
    this.current_node = Nothing
    this.current_node = this.get_next_node()
  end

  {-
    This method is a helper function for get_next_node().
    It should be marked private whenever possible.

    It locates the next index in the map-array that
    contains a non-empty LinkedList.

    If found, it returns a reference to the list
    in a maybe type.
  -}
  def get_next_list() : Maybe[LinkedNode[Entry[v]]]
    this.current_index = this.current_index + 1

    while this.current_index < this.map.size do
      match (this.map.internal_map)(this.current_index) with
        case Just(l) =>
          if l.size > 0 then
            return l.first
          end
        end
        case Nothing => ()
      end

      this.current_index = this.current_index + 1
    end

    return Nothing
  end

  {-
    This is a helper function for next().

    Locates the next node in the LinkedList
    retrieved from get_next_list().
  -}
  def get_next_node() : Maybe[LinkedNode[Entry[v]]]
    match this.current_node with
      case Just(current) =>
        match current.next with
          case Just(n) => return current.next
          case Nothing => return this.get_next_list()
        end
      end
      case Nothing => return this.get_next_list()
    end
  end

  {-
    Retrieve the next value in the iterator.
    Returns Nothing if the end of the HashMap
    has been reached.
  -}
  def next() : Maybe[Entry[v]]
    val current = this.current_node

    if this.has_next() then
      this.current_node = this.get_next_node()
    end

    match current with
      case Just(n) => Just(n.value)
      case Nothing => Nothing
    end
  end

  def has_next() : bool
    match this.current_node with
      case Just(n) => true
      case Nothing => false
    end
  end
end

passive class HashMap[v] : Map[v](size, internal_map, items, resize())
  var size         : uint
  var items        : uint
  var internal_map : [Maybe[LinkedList[Entry[v]]]]

  def init() : unit
    this.items = 0
    this.size = 32
    this.internal_map = new [Maybe[LinkedList[Entry[v]]]](this.size)

    -- Initialize map.
    repeat i <- this.size do
      this.internal_map(i) = Nothing
    end
  end

  {-
    Makes a shallow clone of the HashMap.

    TODO: Optimize
  -}
  def clone() : HashMap[v]
    val new_map = new HashMap[v]()

    repeat i <- |(this.internal_map)| do
      val list = (this.internal_map)(i)
      match list with
        case Just(l) =>
          Foreach e: Entry[v] <- l do
            new_map.set(e.key, e.value)
          end
        end
        case Nothing => ()
      end
    end

    return new_map
  end

  def remove(key : HashCode) : bool
    val hash = key.get_hash()
    val k = hash % this.size

    var removed = false

    val maybe_list = (this.internal_map)(k)

    match maybe_list with
      case Just(l) =>
        val iter = l.iterator()
        while iter.has_next() && not removed do
          match iter.next() with
            case Just(node) =>
              val entry = node.value
              if entry.key.equals(key) then
                l.drop(node)
                this.items = this.items - 1
                removed = true
              end
            end
          end
        end
      end

      case Nothing => ()
    end

    return removed
  end

  def set(key : HashCode, value : v) : unit
    val hash = key.get_hash()
    val entry = new Entry[v](key, value)

    if this.items >= this.size * 0.75 then
      this.resize(this.size * 2)
    end

    -- Remove any previous occurance of this key.
    -- This should be replaced with a better solution!
    this.remove(key)

    -- Store the key-value pair.
    val k = hash % this.size
    val list = (this.internal_map)(k)

    match list with
      case Just(l) => l.prepend(entry)
      case Nothing =>
        val new_list = new LinkedList[Entry[v]]()
        new_list.prepend(entry)
        (this.internal_map)(k) = Just(new_list)
      end
    end

    this.items = this.items + 1
  end

  {-
    Creates a new map with the given size and copies
    all entries of this map into the new one.
    The new map then takes the old ones place inside
    the HashMap.
  -}
  def resize(new_size : uint) : unit
    val new_map = new [Maybe[LinkedList[Entry[v]]]](new_size)

    -- Initialize new_map
    repeat i <- new_size do
      new_map(i) = Nothing
    end

    repeat i <- |(this.internal_map)| do
      val maybe_list = (this.internal_map)(i)
      match maybe_list with
        case Just(l) =>
          Foreach e: Entry[v] <- l do
            -- Add current entry to new map.
            val hash = e.key.get_hash()
            val k = hash % new_size
            match new_map(k) with
              case Just(l) => l.prepend(e)
              case Nothing =>
                val list = new LinkedList[Entry[v]]
                list.prepend(e)
                new_map(k) = Just(list)
              end
            end
          end
        end
        case Nothing => ()
      end
    end

    this.internal_map = new_map
    this.size = new_size
  end

  def get_value(key : HashCode) : Maybe[v]
    val hash = key.get_hash()
    val k = hash % this.size
    val maybe_iter = this.internal_map(k)?.iterator()

    match maybe_iter with
      case Just(i) =>
        while i.has_next() do
          val entry = i.next()
          if entry?.value?.key?.equals(key) == Just(true) then
            return entry?.value?.value
          end
        end
        return Nothing : Maybe[v]
      end
      case Nothing => return Nothing : Maybe[v]
    end
  end

  def size() : int
    this.size
  end

  def iterator() : HashMapIterator[v]
    new HashMapIterator[v](this)
  end

  def foreach(f : v -> unit) : unit
    repeat i <- |this.internal_map| do
      val maybe_list = (this.internal_map)(i)
      match maybe_list with
        case Just(l) =>
          For x: Entry[v] <- l do
            f(x.value)
          end
          () -- It won't compile without this.
        end
        case Nothing => ()
      end
    end
  end

  def map[u](f : v -> u) : HashMap[u]
    val new_map = new HashMap[u]()

    repeat i <- |this.internal_map| do
      val maybe_list = (this.internal_map)(i)
      match maybe_list with
        case Just(l) =>
          For x: Entry[v] <- l do
            new_map.set(x.key, f(x.value))
          end
          () -- It won't compile without this.
        end
        case Nothing => ()
      end
    end

    return new_map
  end

  def filter(f : v -> bool) : HashMap[v]
    val new_map = new HashMap[v]()

    repeat i <- |this.internal_map| do
      val maybe_list = (this.internal_map)(i)
      match maybe_list with
        case Just(l) =>
          For x: Entry[v] <- l do
            if f(x.value) then
              new_map.set(x.key, x.value)
            end
          end
          () -- It won't compile without this.
        end
        case Nothing => ()
      end
    end

    return new_map
  end

  def flatMap[u](f : v -> HashMap[u]) : HashMap[u]
    val new_map = new HashMap[u]()

    repeat i <- |this.internal_map| do
      val maybe_list = (this.internal_map)(i)
      match maybe_list with
        case Just(l) =>
          Foreach x: Entry[v] <- l do
            val m = f(x.value)
            ()
            --x.key should not map to the new values in m.
            -- The keys of m should map to values of m.

            --Foreach y: u <- m do
            --  m.set(x.key, y)
            --end
          end
        end
        case Nothing => ()
      end
    end

    return new_map
  end
end
