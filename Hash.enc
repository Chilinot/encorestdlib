import linked_list
import siphash

{-
    Currently this trait doesn't do anything.
    It will be used in the future when functions can be required,
    and not just fields.
-}
trait Hasher
    {-
        TODO: Require the implementation of this function.
    -}
    --require hash(id : int) : int;

passive class HashMap
    hasher : Hasher
    map    : [LinkedList]
    size   : int

    def init() : void {
        this.hasher = new Siphash;

        -- The initial map can hold 256 unique keys.
        this.size = 256;
        this.map = new [LinkedList](this.size);

        -- Initialize the linked lists.
        for i in [0..this.size - 1] {
            this.map[i] = new LinkedList;
        }
    }

    def set(key : int, value : int) : void {
        let
            list = this.map[key]
        in {
            list.push(value);
        }
    }

    def print_values(key : int) : void {
        let
            list = this.map[key]
        in {
            list.print_all();
        }
    }

class Main
    def main() : void {
        let
            list = new LinkedList
            map  = new HashMap
        in {
            list.push(12);
            list.push(24);
            list.print_all();
            print(list.pop()); -- Just 24
            print(list.pop()); -- Just 12
            print(list.pop()); -- Nothing
            print(list.pop()); -- Nothing
            list.print_all();

            map.set(12, 23);
            map.print_values(12);

            map.set(256, 1337);
            map.print_values(256);
        }
    }
