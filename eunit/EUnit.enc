bundle EUnit where

    def test_optional<a>(message : String, option : Maybe a, expected : a) : bool {
        match option with
            Just value when value == expected => true
            Just value => {
                print("Test {} failed! Expected \"Just x\" got \"Just y\".\n", message);
                false
            }
            Nothing => {
                print("Test {} failed! Expected \"Just x\" got \"Nothing\".\n", message);
                false
            }
    }

    def test_nothing<a>(message : String, option : Maybe a) : bool {
        match option with
            Nothing => true
            Just x => {
                print("Test {} failed! Expected value to be nothing!\n", message);
                false
            }
    }

    passive class TestCase {
        name : String
        fun : () -> bool
        expected : bool

        def init(n : String, f : () -> bool, e : bool) : void {
            this.name = n;
            this.fun = f;
            this.expected = e;
        }

        def perform() : bool {
            let f = this.fun in {
                print("Running test \"{}\":\n", this.name);
                f()
            }
        }
    }

    passive class TestSuite {
        suite_name : String
        test_cases : [TestCase]
        counter    : int

        def init(name : String, test_amount : int) : void {
            this.test_cases = new [TestCase](test_amount);
            this.suite_name = name;
            this.counter = 0;
        }

        def assert_bool(name : String, function : () -> bool, expected : bool) : void {
            this.test_cases[this.counter] = new TestCase(name,function,expected);
            this.counter = this.counter + 1;
        }

        def assert_true(name : String, function : () -> bool) : void {
            this.assert_bool(name, function, true);
        }

        def assert_false(name : String, function : () -> bool) : void {
            this.assert_bool(name, function, false);
        }

        def assert_int(name : String, function : () -> int, expected : int) : void {
            this.assert_true(name, \() -> {
                function() == expected
            });
        }

        def run() : void {
            let
                finished = 0
            in {
                print("\nEUnit testsuite \"{}\" running {} test(s)...\n", this.suite_name, this.counter);

                (repeat i <- this.counter {
                    let
                        test  = this.test_cases[i] : TestCase
                        value = test.perform()     : bool
                    in {
                        if value != test.expected then {
                            print("\tFailure!\n");
                        } else {
                            print("\tSuccess!\n");
                            finished = finished + 1;
                        };
                    }
                });

                print("\nEUnit testsuite \"{}\" completed.\n", this.suite_name);
                print("{}/{} tests completed successfully!\n", finished, this.counter);
            }
        }
    }
