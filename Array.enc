module Array

import Iterable

-- Performs == comparison
def contains<t>(arr : [t], to_find : t) : bool {
    var retval = false;
    for x in arr {
        if x == to_find then {
            retval = true;
            -- Break iteration
            embed unit break; end
        }
    };
    retval
}

-- Performs string comparison
def contains_str(arr : [String], to_find : String) : bool {
    var retval = false;
    for x in arr {
        if x.compare(to_find) == 0 then {
            retval = true;
            -- Break iteration
            embed unit break; end
        }
    };
    retval
}

passive class Array<t> : Iterable<t>(elements)
  val elements : [t]

  def init(size:int) : unit
    this.elements = new [t](size)

  def size() : int
    |this.elements|

  def nth(i:int) : t
    this.elements[i]

  def element_at(i:int) : Maybe t {
    if 0 <= i and i < this.size() then
      Just this.nth(i)
    else
      Nothing
  }

  def set(i:int, v:t) : bool {
    if 0 <= i and i < this.size() then {
      this.elements[i] = v;
      true
    } else {
      false
    }
  }

  -- TODO: add a method that checks for equality
  def contains(v:t) : bool {
    for e in this.elements {
      if e == v then {
        embed bool return true; end;
      }
    }
    false
  }

  -- Private utility method for the Iterable interface
  def private_new_collection(size_hint:int) : Collection<t>
    new ArrayList<t>()

-- This should not be here, but I did not want to mess
-- with the arraylist in ArrayList.enc
passive class ArrayList<t> : Iterable<t>(index,elements) + Collection<t>(index,elements,private_grow_shift())
  elements : [Maybe t]
  index : int

  def init() : unit {
    this.index = 0 ;
    this.elements = new [Maybe t](16) ; -- why 16?
  }

  def nth(n:int) : t {
    match this.elements[n] with
      Just v => v
      _      => this.nth(n) -- HACKY!
  }

  def private_new_collection(size_hint:int) : ArrayList<t>
    new ArrayList<t>()

  def size() : int
    this.index

  -- TODO: optimise
  def append_all(elements:[t]) : unit
    repeat i <- |elements|
      this.append(elements[i])

  -- TODO: optimise
  def prepend_all(elements:[t]) : unit
    repeat i <- |elements|
      this.prepend(elements[i])


  def append(element:t) : unit {
    this.private_grow_shift(0, 0) ;
    this.elements[this.index] = Just element ;
    this.index = this.index + 1 ;
  }

  def prepend(element:t) : unit {
    this.private_grow_shift(1, 0) ;
    this.elements[0] = Just element ;
    this.index = this.index + 1 ;
  }

  -- TODO: Fix comparison logic
  def contains(element:t) : bool {
    repeat i <- this.index
      if this.nth(i) == element then
        embed unit return 1; end ;
    false
  }

  def insert(element:t, index:int) : unit {
    this.private_grow_shift(1, index) ;
    this.elements[index] = Just element ;
    this.index = this.index + 1 ;
  }

  def element_at(index:int) : Maybe t
    this.elements[index]

  def remove_front() : Maybe t
    this.remove(0)

  def remove_back() : Maybe t
    this.remove(this.index - 1)

  def remove(index:int) : Maybe t {
    this.index = this.index - 1 ;
    val element = this.elements[index] ;
    val old = this.elements ;

    if this.index * 2 < |this.elements| then
      this.elements = new [Maybe t](((this.index / 2) + 1) * 2) ;

    repeat i <- (this.index - index)
      this.elements[index + i] = old[index + i + 1] ;

    element;
  }

  def private_grow_shift(offset:int, skip:int) : unit {
    val old = this.elements ;

    if this.index == |this.elements| then
      this.elements = new [Maybe t](this.index * 2) ;

    if old != this.elements or offset > 0 then
      let elems_to_copy = this.index - skip in
        repeat i <- elems_to_copy
          this.elements[(this.index - 1) - i + offset] = old[this.index - 1 - i] ;
  }
