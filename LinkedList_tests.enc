module LinkedList_tests

import LinkedList

def create() : bool {
  val list = new LinkedList<int>();
  list.first == Nothing and
  list.length == 0 and
  list.last == Nothing
}
def prepend_one() : bool {
    val list = new LinkedList<int>();

    list.prepend(22);

    (match list.first with
      Just node => {
        if (node.value != 22 or node.next  != Nothing or node.prev  != Nothing) then {
           println("\tJust node check failed!");
           false
        }
        else {
          true
        }
      }
      _ => false)
    and
    if list.first == list.last then
      true
    else {
      println("\tlist.first != list.last");
      false
    }
}
def prepend_two() : bool {
    let
        list = new LinkedList<int>
    in {
        list.prepend(22);
        list.prepend(12);

        match list.first with
            Just first =>
                (match first.next with
                    Just second =>
                        (
                         first.value  == 12 and
                         second.value == 22 and
                        (match second.prev with
                            Just node => node == first
                            _ => false) and
                        (match first.next with
                            Just node => node == second
                            _ => false)
                        )
                    _ => false)
            _ => false
    }
}
def prepend_three() : bool {
    val list = new LinkedList<int>;
    var success = true;

    list.prepend(42);
    list.prepend(1337);
    list.prepend(420);

    success = success and (
        match list.first with
            Just first => first.value == 420
            _          => false
    );

    success = success and (
        match list.first with
            Just first => (
                match first.next with
                    Just second => second.value == 1337
                    _           => false
            )
            _ => false
    );

    {-
        This tests to make sure that all references
        in the doubly-linked list points to the
        right locations. I'm truly sorry for how
        utterly unreadable it is.
    -}
    success = success and (
        match list.first with
            Just first => (
                match first.next with
                    Just second => (
                        match second.next with
                            Just third => (
                                third.value == 42 and
                                third.prev != Nothing and
                                third.next == Nothing and

                                (match third.prev with
                                    Just n => n == second
                                    _ => false) and

                                (match second.prev with
                                    Just n => n == first
                                    _ => false) and

                                first.prev == Nothing
                                and

                                (match list.first with
                                  Just f => {
                                    if f == first then
                                      true
                                    else {
                                      println("\tlist.first != actual first!");
                                      false
                                    }
                                  }
                                )
                                and

                                (match list.last with
                                  Just l => {
                                    if l == third then
                                      true
                                    else {
                                      println("\tlist.last != actual last!");
                                      false
                                    }
                                  }
                                )
                            )
                            _ => false
                    )
                    _ => false
            )
            _ => false
    );

    -- return
    success
}
def prepend_three_and_remove_middle() : bool {
    val list = new LinkedList<int>;
    var middle = null : LinkedNode<int>;
    var success = true;

    list.prepend(42);
    list.prepend(1337);
    list.prepend(420);

    -- Retrieve the middle node.
    (match list.first with
        Just first => (
            match first.next with
                Just second => middle = second
                _ => success = false
        )
        _ => success = false
    );

    -- Remove the middle node.
    if middle != null then {
        list.drop(middle);
    };

    -- Ensure that it is no longer there
    -- and that the correct node was removed.
    success = success and (
        match list.first with
            Just first => (
                (match first.next with
                    Just second => (
                        (match second.next with
                            Nothing => true
                            _       => false) and
                        second.value == 42
                    )
                    _ => false) and
                first.value == 420
            )
            _ => false
    );

    -- Return
    success
}
def length_1() : bool {
    let
        list = new LinkedList<int>
    in {
        list.prepend(13);
        list.prepend(12);
        list.prepend(11);
        list.prepend(10);

        list.length == 4
    }
}
def length_2() : bool {
    let
        list = new LinkedList<int>
    in {
        list.prepend(13);
        list.prepend(12);
        list.prepend(11);
        list.prepend(10);

        (match list.first with
            Just n => list.drop(n));
        (match list.first with
            Just n => list.drop(n));

        list.length == 2
    }
}
def remove_all_1() : bool {
    let
        list = new LinkedList<char>()
    in {
        list.prepend('a');
        list.prepend('a');
        list.prepend('b');
        list.prepend('a');
        list.prepend('a');

        match list.length with
            5 => {
                list.remove_all('a');
                (match list.length with
                    1 => true
                    x => false
                ) and
                match list.first with
                    Just node => {
                        (match node.prev with
                            Nothing => true
                            _ => false
                        ) and
                        (match node.next with
                            Nothing => true
                            _ => false
                        ) and
                        (match node.value with
                            'b' => true
                            _ => false
                        )
                    }
                    Nothing => false
            }
            x => false
    }
}
def append_one() : bool {
    val list = new LinkedList<int>();

    list.append(22);

    match list.first with
        Just node => node.value == 22 and
                     node.next  == Nothing and
                     node.prev  == Nothing

        _         => false
}
def append_two() : bool {
    val list = new LinkedList<int>();

    list.append(22);
    list.append(12);

    match list.first with
        Just first =>
            (match first.next with
                Just second =>
                    (
                     first.value  == 22 and
                     second.value == 12 and
                    (match second.prev with
                        Just node => node == first
                        _ => false) and
                    (match first.next with
                        Just node => node == second
                        _ => false)
                    )
                _ => false)
        _ => false
}
def append_three() : bool {
    val list = new LinkedList<int>;
    var success = true;

    list.append(42);
    list.append(1337);
    list.append(420);

    success = success and (
        match list.first with
            Just first => first.value == 42
            _          => false
    );

    success = success and (
        match list.first with
            Just first => (
                match first.next with
                    Just second => second.value == 1337
                    _           => false
            )
            _ => false
    );

    {-
        This block tests to make sure that all references
        in the doubly-linked list points to the
        right locations. I'm truly sorry for how
        utterly unreadable it is.
    -}
    success = success and (
        match list.first with
            Just first => (
                match first.next with
                    Just second => (
                        match second.next with
                            Just third => (
                                third.value == 420 and
                                third.prev != Nothing and
                                third.next == Nothing and

                                (match third.prev with
                                    Just n => n == second
                                    _ => false) and

                                (match second.prev with
                                    Just n => n == first
                                    _ => false) and

                                first.prev == Nothing
                                and
                                (match list.first with
                                  Just f => {
                                    if f == first then
                                      true
                                    else {
                                      println("\tlist.first != actual first!");
                                      false
                                    }
                                  }
                                )
                                and
                                (match list.last with
                                  Just l => {
                                    if l == third then
                                      true
                                    else {
                                      println("\tlist.last != actual last!");
                                      false
                                    }
                                  }
                                )
                            )
                            _ => false
                    )
                    _ => false
            )
            _ => false
    );

    success = success and list.length == 3;

    -- return
    success
}
def append_all() : bool {
  val list = new LinkedList<int>();
  list.append_all([1, 2, 3]);

  (match list.element_at(0) with
    Just x => {
      if x == 1 then
        true
      else {
        println("\telement at 0 != 1!");
        false
      }
    }
    Nothing => {
      println("\telement at 0 == Nothing!");
      false
    }
  ) and
  (match list.element_at(1) with
    Just x => {
      if x == 2 then
        true
      else {
        println("\telement at 1 != 2");
        false
      }
    }
    Nothing => {
      println("\telement at 1 == Nothing!");
      false
    }
  ) and
  (match list.element_at(2) with
    Just x => {
      if x == 3 then
        true
      else {
        println("\telement at 2 != 3");
        false
      }
    }
    Nothing => {
      println("\telement at 2 == Nothing!");
      false
    }
  ) and
  (match list.element_at(3) with
    Nothing => true
    Just x => {
      println("\telement at 3 != Nothing!");
      false
    }
  )
  and list.first != list.last
  and list.length == 3
}
def element_at_one() : bool {
  val list = new LinkedList<int>();

  list.append(1);
  list.append(2);
  list.append(3);
  list.append(4);

  match list.element_at(2) with
    Just x => {
      match x with
        3 => true
        x => {
          println("\tgot {}, should have gotten 3!", x);
          false
        }
    }
    Nothing => {
      println("\tgot Nothing!");
      false
    }
}
def contains_one() : bool {
  val list = new LinkedList<int>();
  list.append_all([1,2,3,4,5,6,7,8]);

  list.contains(3)
}
def contains_two() : bool {
  val list = new LinkedList<int>();
  list.append_all([1,2,3,4,5,6,7,8]);

  list.contains(3) and list.contains(7)
}
def contains_three() : bool {
  val list = new LinkedList<int>();
  list.append_all([1,2,3,4,5,6,7,8]);

  not list.contains(10);
}
def prepend_all_one() : bool {
  println("\tTest not implemented!");
  false
}
