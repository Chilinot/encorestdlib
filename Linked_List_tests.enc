import Linked_List
import EUnit

def create() : bool {
    let
        list = new LinkedList<int>
    in {
        list.top == Nothing and list.length == 0
    }
}
def push_one() : bool {
    let
        list = new LinkedList<int>
    in {
        list.push(22);
        match list.top with
            Just node => node.value == 22 and
                         node.next  == Nothing and
                         node.prev  == Nothing

            _         => false
    }
}
def push_two() : bool {
    let
        list = new LinkedList<int>
    in {
        list.push(22);
        list.push(12);

        match list.top with
            Just first =>
                (match first.next with
                    Just second =>
                        (
                         first.value  == 12 and
                         second.value == 22 and
                        (match second.prev with
                            Just node => node == first
                            _ => false) and
                        (match first.next with
                            Just node => node == second
                            _ => false)
                        )
                    _ => false)
            _ => false
    }
}
def push_three() : bool {
    let
        list = new LinkedList<int>
        success = true
    in {
        list.push(42);
        list.push(1337);
        list.push(420);

        success = success and (
            match list.top with
                Just first => first.value == 420
                _          => false
        );

        success = success and (
            match list.top with
                Just first => (
                    match first.next with
                        Just second => second.value == 1337
                        _           => false
                )
                _ => false
        );

        {-
            This clusterfuck of code block
            test to make sure that all references
            in the doubly-linked list points to the
            right locations. I'm truly sorry for how
            utterly unreadable it is.
        -}
        success = success and (
            match list.top with
                Just first => (
                    match first.next with
                        Just second => (
                            match second.next with
                                Just third => (
                                    third.value == 42 and
                                    third.prev != Nothing and
                                    third.next == Nothing and

                                    (match third.prev with
                                        Just n => n == second
                                        _ => false) and

                                    (match second.prev with
                                        Just n => n == first
                                        _ => false) and

                                    first.prev == Nothing
                                )
                                _ => false
                        )
                        _ => false
                )
                _ => false
        );

        -- return
        success
    }
}
def push_three_and_remove_middle() : bool {
    let
        list = new LinkedList<int>
        middle = null : LinkedNode<int>
        success = true
    in {
        list.push(42);
        list.push(1337);
        list.push(420);

        -- Retrieve the middle node.
        (match list.top with
            Just first => (
                match first.next with
                    Just second => middle = second
                    _ => success = false
            )
            _ => success = false
        );

        -- Remove the middle node.
        if middle != null then {
            list.drop(middle);
        };

        -- Ensure that it is no longer there
        -- and that the correct node was removed.
        success = success and (
            match list.top with
                Just first => (
                    (match first.next with
                        Just second => (
                            (match second.next with
                                Nothing => true
                                _       => false) and
                            second.value == 42
                        )
                        _ => false) and
                    first.value == 420
                )
                _ => false
        );

        -- Return
        success
    }
}
def length_1() : bool {
    let
        list = new LinkedList<int>
    in {
        list.push(13);
        list.push(12);
        list.push(11);
        list.push(10);

        list.length == 4
    }
}
def length_2() : bool {
    let
        list = new LinkedList<int>
    in {
        list.push(13);
        list.push(12);
        list.push(11);
        list.push(10);

        (match list.top with
            Just n => list.drop(n));
        (match list.top with
            Just n => list.drop(n));

        list.length == 2
    }
}

class Main
    def main() : void {
        let
            tests = new TestSuite("LinkedList", 100)
        in {
            tests.assert_true("init", create);
            tests.assert_true("push one int", push_one);
            tests.assert_true("push two ints", push_two);
            tests.assert_true("push three ints", push_three);
            tests.assert_true("push three ints and remove middle", push_three_and_remove_middle);
            tests.assert_true("length #1", length_1);
            tests.assert_true("length #2", length_2);

            tests.run();
        }
    }
