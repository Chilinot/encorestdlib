import Linked_List
import Siphash
import Hasher
import Id
import Entry

passive class MapIterator<v>
    map           : HashMap<v>
    current_index : int
    current_node  : Maybe LinkedNode<Entry<v>>

    def init(map : HashMap<v>) : void {
        this.map = map;

        -- This has to start at "-1" because
        -- locate_next() increments the index
        -- when it is called at the start.
        this.current_index = -1;

        -- This needs to be set to "Nothing" before calling locate_next()!
        this.current_node = Nothing;
        this.current_node = this.locate_next();
    }

    def locate_next() : Maybe LinkedNode<Entry<v>> {
        let
            retval = Nothing : Maybe LinkedNode<Entry<v>>
            get_next_top = \() -> {
                let ret = Nothing : Maybe LinkedNode<Entry<v>> in {
                    this.current_index = this.current_index + 1;

                    (while this.current_index < this.map.size and
                           ret == Nothing
                    {
                        let list = this.map.map[this.current_index] in {
                            if list.length > 0 then {
                                ret = list.top;
                            } else {
                                this.current_index = this.current_index + 1;
                            };
                        }
                    });

                    -- Return
                    ret
                }
            }
        in {
            (match this.current_node with
                Just current => {
                    match current.next with
                        Just n => retval = current.next
                        Nothing => retval = get_next_top()
                }

                Nothing => retval = get_next_top()
            );

            -- Return
            retval
        }
    }

    def next() : Maybe Entry<v> {
        let current = this.current_node in {
            if this.has_next() then {
                this.current_node = this.locate_next();
            };

            match current with
                Just node => Just node.value
                Nothing   => Nothing
        }
    }

    def has_next() : bool {
        this.current_node != Nothing
    }

passive class HashMap<v>
    {-
        WARNING: Prone to overflow!

        The 'size' and 'items' integers can overflow!

        They should be swapped for non-signed
        integers whenever possible!

        Hasher.modulo() treats inputs as unsigned
        and returns signed, this can cause it to
        return a negative number. But only if 'size'
        integer is too large!!
    -}
    size   : int
    items  : int
    hasher : Hasher
    map    : [LinkedList<Entry<v>>]

    {-
        Initializer.
    -}
    def init() : void {
        this.hasher = new Siphash;
        this.items = 0;

        -- The initial map can hold this many unique keys.
        this.size = 32;
        this.map = new [LinkedList<Entry<v>>](this.size);

        -- Initialize all lists.
        repeat i <- this.size {
            this.map[i] = new LinkedList<Entry<v>>();
        }
    }

    {-
        Removes any entry that has a
        matching key from the map.
    -}
    def remove(key : Id) : bool {
        let
            hash    = this.hasher.hash(key.get_id())
            k       = this.hasher.modulo(hash, this.size)
            list    = this.map[k]
            ret_val = false
        in {
            -- Iterate over the list and remove
            -- any entry with a matching key.
            let iter = list.iterator() in {
                while iter.has_next() {
                    let current = iter.next() in {
                        -- Extract the contents of the
                        -- LinkedNode<Entry<v>>
                        match current with
                            Just node =>
                                let entry = node.value in {
                                    if entry.key.equals(key) then {
                                        -- Remove the item
                                        list.drop(node);
                                        this.items = this.items - 1;
                                        ret_val = true;
                                    };
                                }
                   }
                }
            };

            -- Return
            ret_val
        }
    }

    {-
        Sets the value for the given
        key in the map.
    -}
    def set(key : Id, value : v) : void {
        let
            hash  = this.hasher.hash(key.get_id())
            entry = new Entry<v>(key, hash, value)
        in {
            -- Increase the size of the map if it contains
            -- about 75% of its capacity of keys.
            if this.items >= (this.size * 0.75) then {
                this.resize(this.size * 2);
            };

            this.remove(key);

            let
                k = this.hasher.modulo(hash, this.size)
                list = this.map[k]
            in {
                list.push(entry);
            };

            this.items = this.items + 1;
        }
    }

    {-
        Resize the map using the given
        integer as the new size.

        This will move all items in the entire
        map. Possibly heavy operation!!
    -}
    def resize(new_size : int) : void {
        let new_map = new [LinkedList<Entry<v>>](new_size) in {
            -- Initialize all lists.
            (repeat i <- new_size {
                new_map[i] = new LinkedList<Entry<v>>();
            });

            let iterator = new MapIterator<v>(this) in {
                -- Move all items from the old array to the new.
                while iterator.has_next() {
                    let current = iterator.next() in {
                        match current with
                            Just entry => {
                                let
                                    hash = entry.key_hash
                                    k    = this.hasher.modulo(hash, new_size)
                                    list = new_map[k]
                                in {
                                    list.push(entry);
                                }
                            }
                    }
                };
            };

            this.map = new_map;
            this.size = new_size;
        }
    }

    {-
        Retrieves the value stored under
        the given key in the map.
    -}
    def get_value(key : Id) : Maybe v {
        let
            hash = this.hasher.hash(key.get_id())
            k    = this.hasher.modulo(hash, this.size)
            list = this.map[k]
        in {
            {-
                Iterate over the list to locate the item.
            -}
            let
                iter = list.iterator()
                tmp  = Nothing : Maybe v
            in {
                while iter.has_next() and tmp == Nothing {
                    let current = iter.next() in {
                        match current with
                            Just entry =>
                                if entry.value.key.equals(key) then {
                                    tmp = Just entry.value.value;
                                };
                    }
                };

                -- Return
                tmp
            }
        }
    }
