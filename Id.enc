import Siphash -- To obfuscate the memory adress.

embed
    #include <stdint.h> // uintptr_t
body
end

{-
    Defines a unique identifier to objects.
-}
trait Id
    require id : int

    {-
        Generates a unique identifier based
        on the memory adress of the object.
    -}
    def generate_id() : int {
        {-
            1. Retrieve memory adress of object.
            2. Call siphash on the adress for obfuscation.
            3. Return the hash value.
        -}
        embed int
            // Hashing-key, can be any random bytes
            uint8_t k[16] = {
                0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07, // k0
                0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f  // k1
            };

            // Allocate 8 bytes on the stack for the hashcode
            uint8_t hash[8];

            // Retrieve adress of this object
            uintptr_t adress = (uintptr_t) _this;

            // Convert the adress to an uint8_t-array
            // WARNING: Assumes little endian!
            size_t ptr_size = sizeof(uintptr_t);
            uint8_t adress_arr[ptr_size];
            for(int i = 0; i < ptr_size; ++i) {
                adress_arr[i] = (uint8_t)((adress) >> i*8);
            }

            // Compute the hash value
            // WARNING: size_t may be larger than uint64_t !!!
            siphash(hash, adress_arr, (uint64_t) ptr_size, k);

            // Return the value to the caller
            U8TO64_LE(hash);
        end
    }

    {-
        True if this object has the same identifier
        as the given object.
    -}
    def equals(object : Id) : bool {
        this.id == object.get_id()
    }

    {-
        Returns the identifier of this object.
    -}
    def get_id() : int {
        this.id
    }
