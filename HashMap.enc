import Linked_List
import Siphash
import Hasher
import Id

passive class Foo : Id
    id : int

    def init() : void {
        this.id = this.generate_id();
    }

passive class HashMap
    {-
        WARNING: Prone to overflow!

        The 'size' integer can overflow!

        It should be swapped for a non-signed
        integer whenever possible!

        Hasher.modulo() treats inputs as unsigned
        and returns signed, this can cause it to
        return a negative number. But only if this
        integer is too large!!
    -}
    size   : int
    hasher : Siphash
    map    : [LinkedList]

    def init() : void {
        this.hasher = new Siphash;

        -- The initial map can hold 256 unique keys.
        this.size = 256;
        this.map = new [LinkedList](this.size);

        -- Initialize the linked lists.
        for i in [0..this.size - 1] {
            this.map[i] = new LinkedList;
        }
    }

    def set(key : Id, value : int) : void {
        let
            hash = this.hasher.hash(key.get_id())
            k    = this.hasher.modulo(hash, this.size)
            list = this.map[k]
        in {
            print("Key id: {}\n", key.get_id());
            print("Pushing key value: <{},{}>\n", k, value);
            list.push(value);
        }
    }

    def print_values(key : Id) : void {
        let
            hash = this.hasher.hash(key.get_id())
            k    = this.hasher.modulo(hash, this.size)
            list = this.map[k]
        in {
            list.print_all();
        }
    }

class Main
    def main() : void {
        let
            map  = new HashMap
            foobar = new Foo()
            barfoo = new Foo()
        in {
            map.set(foobar, 23);
            map.print_values(foobar);

            map.set(barfoo, 1337);
            map.print_values(barfoo);
        }
    }
