import Linked_List
import Siphash
import Hasher
import Id

passive class Foo : Id
    id : int

    def init() : void {
        this.id = this.generate_id();
    }

{-
    Wrapper around key-value pairs for maps.
-}
passive class MapValue<v>
    key : Id
    value : v

    def init(key : Id, value : v) : void {
        this.key = key;
        this.value = value;
    }

passive class HashMap<v>
    {-
        WARNING: Prone to overflow!

        The 'size' and 'items' integers can overflow!

        They should be swapped for non-signed
        integers whenever possible!

        Hasher.modulo() treats inputs as unsigned
        and returns signed, this can cause it to
        return a negative number. But only if 'size'
        integer is too large!!
    -}
    size   : int
    items  : int
    hasher : Siphash
    map    : [MapValue<v>]

    def init() : void {
        this.hasher = new Siphash;
        this.items = 0;

        -- The initial map can hold 256 unique keys.
        this.size = 256;
        this.map = new [MapValue<v>](this.size);
    }

    def set(key : Id, value : v) : void {
        let
            hash = this.hasher.hash(key.get_id())
            k    = this.hasher.modulo(hash, this.size)
        in {
            if(this.map[k] == null) then {
                this.items = this.items + 1;
            };
            this.map[k] = new MapValue<v>(key, value);
        }
    }

    def get_value(key : Id) : Maybe v {
        let
            hash = this.hasher.hash(key.get_id())
            k    = this.hasher.modulo(hash, this.size)
            pair = this.map[k]
        in {
            if pair != null then
                Just pair.value
            else
                Nothing
        }
    }

    {-
        Returns the amount of key-value pairs
        currently stored in the map.
    -}
    def get_pair_amount() : int {
        this.items
    }

    {-
        Returns the amount of unique keys the map
        is currently able to store.
    -}
    def get_size() : int {
        this.size
    }

class Main
    def main() : void {
        let
            map  = new HashMap<int>
            foobar = new Foo()
            barfoo = new Foo()
        in {
            map.set(foobar, 23);
            print(map.get_value(foobar));

            map.set(barfoo, 1337);
            print(map.get_value(barfoo));

            print("Items: {}\n", map.get_pair_amount());

            map.set(barfoo, 247);
            print(map.get_value(barfoo));

            print("Items: {}\n", map.get_pair_amount());
        }
    }
