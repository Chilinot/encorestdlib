import Linked_List
import Siphash
import Hasher
import Id

{-
    Wrapper around key-value pairs for maps.
-}
passive class Entry<v>
    key : Id
    value : v

    def init(key : Id, value : v) : void {
        this.key = key;
        this.value = value;
    }

passive class MapIterator<v>
    current_index : int
    current_node  : Maybe LinkedNode<Entry<v>>

    def init() : void {
        this.current_index = 0;
        this.current_node = Nothing;
    }

    def has_next() : bool {
        false
    }

    def next() : Maybe Entry<v> {
        Nothing
    }

passive class HashMap<v>
    {-
        WARNING: Prone to overflow!

        The 'size' and 'items' integers can overflow!

        They should be swapped for non-signed
        integers whenever possible!

        Hasher.modulo() treats inputs as unsigned
        and returns signed, this can cause it to
        return a negative number. But only if 'size'
        integer is too large!!
    -}
    size   : int
    items  : int
    hasher : Siphash
    map    : [LinkedList<Entry<v>>]

    {-
        Initializer.
    -}
    def init() : void {
        this.hasher = new Siphash;
        this.items = 0;

        -- The initial map can hold this many unique keys.
        this.size = 20;
        this.map = new [LinkedList<Entry<v>>](this.size);

        -- Initialize all lists.
        for i in [0..this.size-1] {
            this.map[i] = new LinkedList<Entry<v>>();
        }
    }

    {-
        Removes any entry that has a
        matching key from the map.
    -}
    def remove(key : Id) : bool {
        let
            hash    = this.hasher.hash(key.get_id())
            k       = this.hasher.modulo(hash, this.size)
            list    = this.map[k]
            ret_val = false
        in {
            -- Iterate over the list and remove
            -- any entry with a matching key.
            let iter = list.iterator() in {
                while iter.has_next() {
                    let current = iter.next() in {
                        -- Extract the contents of the
                        -- LinkedNode<Entry<v>>
                        match current with
                            Just node =>
                                let entry = node.value in {
                                    if entry.key.equals(key) then {
                                        -- Remove the item
                                        list.drop(node);
                                        this.items = this.items - 1;
                                        ret_val = true;
                                    };
                                }
                   }
                }
            };

            -- Return
            ret_val
        }
    }

    {-
        Sets the value for the given
        key in the map.
    -}
    def set(key : Id, value : v) : void {
        let
            hash  = this.hasher.hash(key.get_id())
            k     = this.hasher.modulo(hash, this.size)
            list  = this.map[k]
            entry = new Entry<v>(key, value)
        in {
            -- Increase the size of the map if it contains
            -- about 75% of its capacity of keys.
            if this.items >= (this.size * 0.75) then {
                this.resize(this.size * 2);
            };

            this.remove(key);
            list.push(entry);
            this.items = this.items + 1;
        }
    }

    {-
        Resize the map using the given
        integer as the new size.

        This will move all items in the entire
        map. Possibly heavy operation!!
    -}
    def resize(new_size : int) : void {
        let
            new_map = new [LinkedList<Entry<v>>](new_size)
        in {
            -- Initialize all lists.
            (for i in [0..new_size-1] {
                new_map[i] = new LinkedList<Entry<v>>();
            });


        }
    }

    {-
        Retrieves the value stored under
        the given key in the map.
    -}
    def get_value(key : Id) : Maybe v {
        let
            hash = this.hasher.hash(key.get_id())
            k    = this.hasher.modulo(hash, this.size)
            list = this.map[k]
        in {
            {-
                Iterate over the list to locate the item.
            -}
            let
                iter    = list.iterator()
                current = Nothing : Maybe LinkedNode<Entry<v>>
                tmp     = Nothing : Maybe v
            in {
                while iter.has_next() and tmp == Nothing {
                    current = iter.next();
                    match current with
                        Just entry =>
                            if entry.value.key.equals(key) then {
                                tmp = Just entry.value.value;
                            };
                };

                -- Return
                tmp
            }
        }
    }
