import HashMap
import Id

passive class Foo : Id {
    id : int

    def init() : void {
        this.id = this.generate_id();
    }
}

def set_and_get() : bool {
    let
        map = new HashMap<int>
        foo = new Foo()
    in {
        map.set(foo, 12);
        match map.get_value(foo) with
            Just 12 => true
            _       => false
    }
}
def items_and_size_1() : bool {
    let
        map = new HashMap<int>
        foo = new Foo()
        bar = new Foo()
    in {
        map.set(foo, 12);
        map.set(bar, 12);

        map.items == 2 and map.size == 32
    }
}
def items_and_size_2() : bool {
    let
        map = new HashMap<int>
        foo = new Foo()
        bar = new Foo()
    in {
        map.set(foo, 12);
        map.set(bar, 12);
        map.set(foo, 23);

        map.items == 2 and map.size == 32
    }
}
def remove_1() : bool {
    let
        map = new HashMap<int>
        foo = new Foo()
        ret = true
    in {
        map.set(foo, 12);

        map.remove(foo);
        (match map.get_value(foo) with
            Nothing => ret = ret and true
            _       => ret = false);

        ret
    }
}
def remove_2() : bool {
    let
        map = new HashMap<int>
        foo = new Foo()
        bar = new Foo()
        ret = true
    in {
        map.set(foo, 12);
        map.set(bar, 42);

        map.remove(foo);

        (match map.get_value(foo) with
            Nothing => ret = ret and true
            _       => ret = false);
        (match map.get_value(bar) with
            Just 42 => ret = ret and true
            _       => ret = false);
        (match map.items with
            1 => ret = ret and true
            _ => ret = false);
        (match map.size with
            32 => ret = ret and true
            _  => ret = false);

        ret
    }
}
def dual_remove() : bool {
    let
        map = new HashMap<int>
        foo = new Foo()
        ret = true
    in {
        -- This is tested in remove_1 & remove_2.
        map.set(foo, 12);
        map.remove(foo);

        -- foo has already been removed so this
        -- should return false:
        map.remove(foo)
    }
}
def items_1() : int {
    let
        map = new HashMap<int>
        foo = new Foo()
    in {
        map.set(foo,12);
        map.items
    }
}
def items_2() : int {
    let
        map = new HashMap<int>
        foo = new Foo()
        bar = new Foo()
    in {
        map.set(foo, 12);
        map.set(bar, 42);
        map.items
    }
}
def items_3() : int {
    let
        map = new HashMap<int>
        foo = new Foo()
        bar = new Foo()
    in {
        map.set(foo, 12);
        map.set(bar, 42);
        map.set(bar, 1337);
        map.items
    }
}
def items_4() : int {
    let
        map = new HashMap<int>
        f1  = new Foo()
        f2  = new Foo()
        f3  = new Foo()
        f4  = new Foo()
        f5  = new Foo()
        f6  = new Foo()
        f7  = new Foo()
        f8  = new Foo()
        f9  = new Foo()
    in {
        map.set(f1,1);
        map.set(f2,2);
        map.set(f3,3);
        map.set(f4,4);
        map.set(f5,5);
        map.set(f6,6);
        map.set(f7,7);
        map.set(f8,8);
        map.set(f9,9);

        map.items
    }
}
def size_1() : int {
    let
        map = new HashMap<int>
        f1  = new Foo()
        f2  = new Foo()
        f3  = new Foo()
        f4  = new Foo()
        f5  = new Foo()
        f6  = new Foo()
        f7  = new Foo()
        f8  = new Foo()
        f9  = new Foo()
    in {
        map.set(f1,1);
        map.set(f2,2);
        map.set(f3,3);
        map.set(f4,4);
        map.set(f5,5);
        map.set(f6,6);
        map.set(f7,7);
        map.set(f8,8);
        map.set(f9,9);

        map.size
    }
}
def iterator_test_1() : bool {
    let
        ret = false
        map = new HashMap<int>()
        foo = new Foo()
    in {
        map.set(foo, 12);
        let
            iter = new MapIterator<int>(map)
        in {
            ret = (
                (match iter.has_next() with
                    true  => true
                    false => {
                        print("\tCheck #1: iter.has_next() returned false!");
                        false
                    }
                ) and (match iter.next() with
                    Just entry => entry.key == foo and entry.value == 12
                    Nothing    => {
                        print("\tCheck #2: iter.next() returned \"Nothing\".");
                        false
                    }

                -- All of the below checks should get "Nothing" or "false"!
                ) and (match iter.has_next() with
                    false => true
                    true  => {
                        print("\tCheck #3: iter.has_next() returned true!");
                        false
                    }
                ) and (match iter.next() with
                    Nothing => true
                    Just e  => {
                        print("\tCheck #4: iter.next() returned \"Just ...\".");
                        false
                    }
                ) and (match iter.has_next() with
                    false => true
                    true  => {
                        print("\tCheck #5: iter.has_next() returned true!");
                        false
                    }
                ) and (match iter.next() with
                    Nothing => true
                    Just e  => {
                        print("\tCheck #6: iter.next() returned \"Just ...\".");
                        false
                    }
                )
            );
        };

        -- Return
        ret
    }
}
def iterator_test_2() : bool {
    let
        ret = false
        map = new HashMap<int>()
        foo = new Foo()
        bar = new Foo()
    in {
        map.set(foo, 12);
        map.set(bar, 43);
        let
            iter = new MapIterator<int>(map)
        in {
            ret = (
                (match iter.has_next() with
                    true  => true
                    false => {
                        print("\tCheck #1: iter.has_next() returned false!");
                        false
                    }
                ) and (match iter.next() with
                    Just entry => {
                        (entry.key == foo and entry.value == 12) or
                        (entry.key == bar and entry.value == 43)
                    }
                    Nothing    => {
                        print("\tCheck #2: iter.next() returned \"Nothing\".");
                        false
                    }
                ) and (match iter.has_next() with
                    true  => true
                    false => {
                        print("\tCheck #3: iter.has_next() returned false!");
                        false
                    }
                ) and (match iter.next() with
                    Just entry => {
                        (entry.key == foo and entry.value == 12) or
                        (entry.key == bar and entry.value == 43)
                    }
                    Nothing    => {
                        print("\tCheck #4: iter.next() returned \"Nothing\".");
                        false
                    }

                -- These should get "false" and "Nothing".
                ) and (match iter.has_next() with
                    false => true
                    true  => {
                        print("\tCheck #5: iter.has_next() returned true!");
                        false
                    }
                ) and (match iter.next() with
                    Nothing => true
                    Just e  => {
                        print("\tCheck #6: iter.next() returned \"Just ...\".");
                        false
                    }
                )
            );
        };

        -- Return
        ret
    }
}

{-
    This test has to be large in order
    to fully saturate a HashMap with keys.
-}
def resize_1() : bool {
    let
        map = new HashMap<int>()
        old_internal_map = map.map
        retval = false
        f0  = new Foo()
        f1  = new Foo()
        f2  = new Foo()
        f3  = new Foo()
        f4  = new Foo()
        f5  = new Foo()
        f6  = new Foo()
        f7  = new Foo()
        f8  = new Foo()
        f9  = new Foo()
        f10 = new Foo()
        f11 = new Foo()
        f12 = new Foo()
        f13 = new Foo()
        f14 = new Foo()
        f15 = new Foo()
        f16 = new Foo()
        f17 = new Foo()
        f18 = new Foo()
        f19 = new Foo()
        f20 = new Foo()
        f21 = new Foo()
        f22 = new Foo()
        f23 = new Foo()
        f24 = new Foo()
        f25 = new Foo()
    in {
        -- Saturate the map.
        map.set(f0, 0);
        map.set(f1, 1);
        map.set(f2, 2);
        map.set(f3, 3);
        map.set(f4, 4);
        map.set(f5, 5);
        map.set(f6, 6);
        map.set(f7, 7);
        map.set(f8, 8);
        map.set(f9, 9);
        map.set(f10, 10);
        map.set(f11, 11);
        map.set(f12, 12);
        map.set(f13, 13);
        map.set(f14, 14);
        map.set(f15, 15);
        map.set(f16, 16);
        map.set(f17, 17);
        map.set(f18, 18);
        map.set(f19, 19);
        map.set(f20, 20);
        map.set(f21, 21);
        map.set(f22, 22);
        map.set(f23, 23);

        -- Ensure the map has not resized itself.
        retval = (
            (match map.items with
                24 => true
                v  => {
                    print("\tCheck #1: Expected 24 got {}!\n", v);
                    false
                }
            ) and (match map.size with
                32 => true
                v  => {
                    print("\tCheck #2: Expected 32 got {}!\n", v);
                    false
                }

            -- Ensure the old map is still there.
            ) and old_internal_map == map.map
        );

        -- This should force the hashmap to resize.
        map.set(f24, 24);
        map.set(f25, 25);

        -- Ensure that the map has resized itself correctly.
        retval = retval and (
            (match map.items with
                26 => true
                v  => {
                    print("\tCheck #3: Expected 26 got {}!\n", v);
                    false
                }
            ) and (match map.size with
                64 => true
                v  => {
                    print("\tCheck #4: Expected 64 got {}!\n", v);
                    false
                }

            -- Ensure that the internal array has actually been changed.
            ) and old_internal_map != map.map
        );

        -- Are we still able to retrieve the values?
        retval = retval and (match map.get_value(f0) with
                Just v  => v == 0
                Nothing => {
                    print("\tGet value check #0 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f1) with
                Just v  => v == 1
                Nothing => {
                    print("\tGet value check #1 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f2) with
                Just v  => v == 2
                Nothing => {
                    print("\tGet value check #2 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f3) with
                Just v  => v == 3
                Nothing => {
                    print("\tGet value check #3 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f4) with
                Just v  => v == 4
                Nothing => {
                    print("\tGet value check #4 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f5) with
                Just v  => v == 5
                Nothing => {
                    print("\tGet value check #5 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f6) with
                Just v  => v == 6
                Nothing => {
                    print("\tGet value check #6 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f7) with
                Just v  => v == 7
                Nothing => {
                    print("\tGet value check #7 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f8) with
                Just v  => v == 8
                Nothing => {
                    print("\tGet value check #8 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f9) with
                Just v  => v == 9
                Nothing => {
                    print("\tGet value check #9 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f10) with
                Just v  => v == 10
                Nothing => {
                    print("\tGet value check #10 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f11) with
                Just v  => v == 11
                Nothing => {
                    print("\tGet value check #11 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f12) with
                Just v  => v == 12
                Nothing => {
                    print("\tGet value check #12 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f13) with
                Just v  => v == 13
                Nothing => {
                    print("\tGet value check #13 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f14) with
                Just v  => v == 14
                Nothing => {
                    print("\tGet value check #14 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f15) with
                Just v  => v == 15
                Nothing => {
                    print("\tGet value check #15 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f16) with
                Just v  => v == 16
                Nothing => {
                    print("\tGet value check #16 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f17) with
                Just v  => v == 17
                Nothing => {
                    print("\tGet value check #17 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f18) with
                Just v  => v == 18
                Nothing => {
                    print("\tGet value check #18 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f19) with
                Just v  => v == 19
                Nothing => {
                    print("\tGet value check #19 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f20) with
                Just v  => v == 20
                Nothing => {
                    print("\tGet value check #20 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f21) with
                Just v  => v == 21
                Nothing => {
                    print("\tGet value check #21 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f22) with
                Just v  => v == 22
                Nothing => {
                    print("\tGet value check #22 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f23) with
                Just v  => v == 23
                Nothing => {
                    print("\tGet value check #23 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f24) with
                Just v  => v == 24
                Nothing => {
                    print("\tGet value check #24 failed!");
                    false
                }
            );
        retval = retval and (match map.get_value(f25) with
                Just v  => v == 25
                Nothing => {
                    print("\tGet value check #25 failed!");
                    false
                }
            );

        -- Return
        retval
    }
}
